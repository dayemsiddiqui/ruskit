[tasks.kit]
workspace = false
command = "cargo"
args = ["install", "--path", ".", "--force"]

[tasks.install-watch]
command = "cargo"
args = ["install", "cargo-watch"]

[tasks.watch-templates]
dependencies = ["install-watch"]
command = "cargo"
args = ["watch", "-w", "templates", "-w", "src", "-x", "build"]

[tasks.watch-server]
dependencies = ["install-watch"]
command = "cargo"
args = ["watch", "-w", "templates", "-w", "src", "-x", "run -- serve"]
env = { DATABASE_URL = { value = "sqlite:data/db.sqlite?mode=rwc", condition = { env_not_set = ["DATABASE_URL"] } } }
env_files = [".env"]

[tasks.watch-assets]
command = "npm"
args = ["run", "dev"]

[tasks.dev]
workspace = false
run_task = { name = ["watch-assets", "watch-server"], parallel = true }

[tasks.serve]
workspace = false
command = "cargo"
args = ["run", "--", "serve"]
description = "Run the production server"
env = { DATABASE_URL = { value = "sqlite:data/db.sqlite?mode=rwc", condition = { env_not_set = ["DATABASE_URL"] } } }
env_files = [".env"]

[tasks.queue]
workspace = false
command = "cargo"
args = ["run", "--", "queue:work"]
description = "Run the queue worker"
env = { DATABASE_URL = { value = "sqlite:data/db.sqlite?mode=rwc", condition = { env_not_set = ["DATABASE_URL"] } } }
env_files = [".env"]

[tasks.queue-watch]
workspace = false
dependencies = ["install-watch"]
command = "cargo"
args = ["watch", "-w", "src", "-x", "run -- queue:work"]
description = "Run the queue worker in watch mode (reloads on code changes)"
env = { DATABASE_URL = { value = "sqlite:data/db.sqlite?mode=rwc", condition = { env_not_set = ["DATABASE_URL"] } } }
env_files = [".env"]

[tasks.queue-named]
workspace = false
command = "cargo"
args = ["run", "--", "queue:work", "--queue", "${@}"]
description = "Run a queue worker for a specific queue"
env = { DATABASE_URL = { value = "sqlite:data/db.sqlite?mode=rwc", condition = { env_not_set = ["DATABASE_URL"] } } }
env_files = [".env"]

[tasks.queue-named-watch]
workspace = false
dependencies = ["install-watch"]
command = "cargo"
args = ["watch", "-w", "src", "-x", "run -- queue:work --queue ${@}"]
description = "Run a queue worker for a specific queue in watch mode"
env = { DATABASE_URL = { value = "sqlite:data/db.sqlite?mode=rwc", condition = { env_not_set = ["DATABASE_URL"] } } }
env_files = [".env"]

[tasks.dev-with-queue]
workspace = false
run_task = { name = ["watch-assets", "watch-server", "queue-watch"], parallel = true }

[tasks.migration-new]
workspace = false
command = "sea-orm-cli"
args = ["migrate", "generate", "${@}", "-d", "migration"]

[tasks.migration-up]
workspace = false
command = "sea-orm-cli"
args = ["migrate", "up", "-d", "migration"]

[tasks.migration-down]
workspace = false
command = "sea-orm-cli"
args = ["migrate", "down", "-d", "migration"]

[tasks.migration-fresh]
workspace = false
command = "sea-orm-cli"
args = ["migrate", "fresh", "-d", "migration"]

[tasks.migration-reset]
workspace = false
command = "sea-orm-cli"
args = ["migrate", "reset", "-d", "migration"]

[tasks.generate-entities]
workspace = false
command = "sea-orm-cli"
args = ["generate", "entity", "--lib", "--output-dir", "src/app/entities", "--database-url", "${DATABASE_URL}"]
env = { DATABASE_URL = { value = "sqlite:data/db.sqlite?mode=rwc", condition = { env_not_set = ["DATABASE_URL"] } } }
env_files = [".env"]

[tasks.install-sea-orm-cli]
workspace = false
command = "cargo"
args = ["install", "sea-orm-cli"]

[tasks.setup-db]
workspace = false
dependencies = ["install-sea-orm-cli"]

[tasks.schedule]
workspace = false
command = "cargo"
args = ["run", "--", "schedule"]
description = "Run the scheduler to execute cron jobs"

[tasks.schedule-watch]
workspace = false
dependencies = ["install-watch"]
command = "cargo"
args = ["watch", "-w", "src", "-x", "run -- schedule"]
description = "Run the scheduler in watch mode (reloads on code changes)" 